# Creates: ALB Security Group, App Load Balancer, Default Target Group, ALB Listeners
#
# Add variables:
# Region="us-east-1"
# VPCName="RunpleVPC"
# Environment="Dev" or "Prod"
# KeyName="main-nvirginia"
# HostedZoneName="miit.pp.ua"
# SSLCertificateARN="arn:aws:acm:us-east-1:899333571677:certificate/64095605-9aab-4da9-bb1e-daecdc0051de"
#
# To create/update stack use:
# aws cloudformation deploy --stack-name main-alb --template-file ops/cfn/main-alb.yml --parameter-overrides VPCStackName=${Environment}${VPCName} Environment=${Environment} SSLCertificateARN=${SSLCertificateARN} --region ${Region}
#
# To delete stack use:
# aws cloudformation delete-stack --stack-name main-alb --region ${Region}
---
  AWSTemplateFormatVersion: "2010-09-09"

  Description: "Creates: ALB Security Group, App Load Balancer,
                  Default Target Group, ALB Listeners"

  Parameters:
    VPCStackName:
      Type: String
    Environment:
      Type: String
      Description: Dev or Prod
      AllowedValues: [ Dev, Prod ]
    SSLCertificateARN:
      Type: String
      Description: ARN of the existing SSL Certificate.


  Resources:
    MainALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Enable HTTP and HTTPS access via ports 80 and 443
          VpcId:
            Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 443
              ToPort: 443
              CidrIp: 0.0.0.0/0
          Tags:
            - Key: "Name"
              Value: "ALBsg"
            - Key: "Environment"
              Value: !Ref Environment

    MainAppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          IpAddressType: 'ipv4'
          Name: "mainALB"
          Scheme: "internet-facing"
          SecurityGroups:
            - Ref: MainALBSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet0"
            - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet1"
          Tags:
            - Key: "Name"
              Value: "mainALB"
            - Key: "Environment"
              Value: !Ref Environment

    DefaultTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: "defaultTG"
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetType: instance
        Matcher:
          HttpCode: '200-299'
        Port: 8080
        Protocol: HTTP
        UnhealthyThresholdCount: 2
        VpcId:
          Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
        Tags:
        - Key: "Name"
          Value: "degaultTG"
        - Key: "Environment"
          Value: !Ref Environment

    HttpListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
            - Type: redirect
              RedirectConfig:
                Protocol: HTTPS
                Port: "443"
                StatusCode: HTTP_301
          LoadBalancerArn: !Ref MainAppLoadBalancer
          Port: 80
          Protocol: HTTP

    HttpsListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          Certificates:
            - CertificateArn: !Ref SSLCertificateARN
          DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref DefaultTargetGroup
          LoadBalancerArn: !Ref MainAppLoadBalancer
          Port: 443
          Protocol: HTTPS


  Outputs:
      AppLoadBalancerARN:
        Description: "ARN of the ALB"
        Value: !Ref MainAppLoadBalancer
        Export:
          Type: String
          Name: !Sub "${AWS::StackName}-ARN"

      AppLoadBalancerSG:
        Description: "SG of the ALB"
        Value: !Ref MainALBSecurityGroup
        Export:
          Type: String
          Name: !Sub "${AWS::StackName}-SG-ARN"

      AppLoadBalancerDNSName:
        Description: "The original DNS Name of the ALB"
        Value: !GetAtt MainAppLoadBalancer.DNSName
        Export:
          Type: String
          Name: !Sub "${AWS::StackName}-DNSName"

      AppLoadBalancerHTTPSListenerARN:
        Description: "The ARN of the ALB HTTPS Listener"
        Value: !Ref HttpsListener
        Export:
          Type: String
          Name: !Sub "${AWS::StackName}-HttpsListener-ARN"

      HostedZoneID:
        Description: "The ID of the Hosted Zone associated with the ALB"
        Value: !GetAtt MainAppLoadBalancer.CanonicalHostedZoneID
        Export:
          Type: String
          Name: !Sub "${AWS::StackName}-Associate-HostedZoneID"

      DefaultTargetGroupARN:
        Description: "ARN of the default target group"
        Value: !Ref DefaultTargetGroup
        Export:
          Type: String
          Name: !Sub "${AWS::StackName}-defaultTG-ARN"
