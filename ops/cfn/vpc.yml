# Creates custom VPC with two public and at least two private subnets (one in each AZ),
# and NAT Gateways
#
# For manual creation/update use:
# aws cloudformation deploy --stack-name RunpleVPC --template-file ops/cfn/vpc.yml --parameter-overrides Environment=Dev --region us-east-1
# To delete stack use:
# aws cloudformation delete-stack --stack-name RunpleVPC
---
  AWSTemplateFormatVersion: "2010-09-09"

  Description: "Creates a VPC with Managed NAT"

  Parameters:
    Environment:
      Type: String
      AllowedValues: [ Dev, Prod ]
      ConstraintDescription: Must be a valid environment name (Dev or Prod)

  Mappings:
    SubnetConfig:
      VPC:
        Dev: "172.16.0.0/16"
        Prod: "10.0.0.0/16"
      Public0:
        Dev: "172.16.0.0/22"
        Prod: "10.0.0.0/22"
      Public1:
        Dev: "172.16.4.0/22"
        Prod: "10.0.4.0/22"
      Private0:
        Dev: "172.16.64.0/18"
        Prod: "10.0.64.0/18"
      Private1:
        Dev: "172.16.128.0/18"
        Prod: "10.0.128.0/18"
      Private2:
        Dev: "172.16.192.0/19"
        Prod: "10.0.192.0/19"
      Private3:
        Dev: "172.16.224.0/19"
        Prod: "10.0.224.0/19"

    AZRegions:
      us-east-1:
        PublicAZs: [ "a", "b" ]
        PrivateAZs: [ "a", "b" ]
      us-west-1:
        PublicAZs: [ "a", "b" ]
        PrivateAZs: [ "a", "b" ]

  Resources:
    VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: true
        EnableDnsHostnames: true
        CidrBlock: !FindInMap [ "SubnetConfig", "VPC", !Ref Environment ]
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "RunpleVPC"


    PublicSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          !Sub
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "PublicAZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Public0", !Ref Environment ]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PublicSubnet0"

    PublicSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          !Sub
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "PublicAZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Public1", !Ref Environment ]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PublicSubnet1"

    PrivateSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          !Sub
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "PrivateAZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Private0", !Ref Environment ]
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PrivateSubnet0"
        MapPublicIpOnLaunch: true

    PrivateSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          !Sub
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "PrivateAZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Private1", !Ref Environment ]
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PrivateSubnet1"
        MapPublicIpOnLaunch: true

    PrivateSubnet2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          !Sub
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "PrivateAZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Private2", !Ref Environment ]
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PrivateSubnet2"
        MapPublicIpOnLaunch: true

    PrivateSubnet3:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          !Sub
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "PrivateAZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Private3", !Ref Environment ]
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PrivateSubnet3"
        MapPublicIpOnLaunch: true

    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "InternetGateway"

    AttachGateway:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId: !Ref "VPC"
        InternetGatewayId: !Ref "InternetGateway"

    PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref "VPC"
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PublicRouteTable"

    PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "AttachGateway"
      Properties:
        RouteTableId: !Ref "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref "InternetGateway"

    PublicSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PublicSubnet0"
        RouteTableId: !Ref "PublicRouteTable"

    PublicSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PublicSubnet1"
        RouteTableId: !Ref "PublicRouteTable"

    PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId: !Ref "VPC"
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PublicNACl"

    InboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId: !Ref "PublicNetworkAcl"
        RuleNumber: 100
        Protocol: -1
        RuleAction: "allow"
        Egress: false
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: 0
          To: 65535

    OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId: !Ref "PublicNetworkAcl"
        RuleNumber: 100
        Protocol: -1
        RuleAction: "allow"
        Egress: true
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: 0
          To: 65535

    PublicSubnetNetworkAclAssociation0:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId: !Ref "PublicSubnet0"
        NetworkAclId: !Ref "PublicNetworkAcl"

    PublicSubnetNetworkAclAssociation1:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId: !Ref "PublicSubnet1"
        NetworkAclId: !Ref "PublicNetworkAcl"




    # ElasticIP0:
    #   Type: "AWS::EC2::EIP"
    #   Properties:
    #     Domain: "vpc"
    #     Tags:
    #       - Key: "Environment"
    #         Value: !Ref Environment
    #       - Key: "Name"
    #         Value: "EIP0"
    #       - Key: "Description"
    #         Value: "For NatGateway0"
    #   DependsOn: InternetGateway
    #
    # ElasticIP1:
    #   Type: "AWS::EC2::EIP"
    #   Properties:
    #     Domain: "vpc"
    #     Tags:
    #       - Key: "Environment"
    #         Value: !Ref Environment
    #       - Key: "Name"
    #         Value: "EIP1"
    #       - Key: "Description"
    #         Value: "For NatGateway1"
    #   DependsOn: InternetGateway
    #
    # NATGateway0:
    #   Type: "AWS::EC2::NatGateway"
    #   Properties:
    #     AllocationId:
    #       Fn::GetAtt:
    #         - "ElasticIP0"
    #         - "AllocationId"
    #     SubnetId: !Ref "PublicSubnet0"
    #     Tags:
    #       - Key: "Environment"
    #         Value: !Ref Environment
    #       - Key: "Name"
    #         Value: "NAT0"
    #
    # NATGateway1:
    #   Type: "AWS::EC2::NatGateway"
    #   Properties:
    #     AllocationId:
    #       Fn::GetAtt:
    #         - "ElasticIP1"
    #         - "AllocationId"
    #     SubnetId: !Ref "PublicSubnet1"
    #     Tags:
    #       - Key: "Environment"
    #         Value: !Ref Environment
    #       - Key: "Name"
    #         Value: "NAT1"

    PrivateRouteTable0:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref "VPC"
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PrivateRouteTable0"

    PrivateRouteTable1:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref "VPC"
        Tags:
          - Key: "Environment"
            Value: !Ref Environment
          - Key: "Name"
            Value: "PrivateRouteTable1"

    PrivateRouteToInternet0:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId: !Ref "PrivateRouteTable0"
        DestinationCidrBlock: "0.0.0.0/0"
#        NatGatewayId: !Ref "NATGateway0"
        GatewayId: !Ref "InternetGateway"

    PrivateRouteToInternet1:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId: !Ref "PrivateRouteTable1"
        DestinationCidrBlock: "0.0.0.0/0"
#        NatGatewayId: !Ref "NATGateway1"
        GatewayId: !Ref "InternetGateway"

    PrivateSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PrivateSubnet0"
        RouteTableId: !Ref "PrivateRouteTable0"

    PrivateSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PrivateSubnet1"
        RouteTableId: !Ref "PrivateRouteTable1"

    PrivateSubnetRouteTableAssociation2:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PrivateSubnet2"
        RouteTableId: !Ref "PrivateRouteTable0"

    PrivateSubnetRouteTableAssociation3:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PrivateSubnet3"
        RouteTableId: !Ref "PrivateRouteTable1"

  Outputs:
    VPC:
      Description: "VPCId of VPC"
      Value: !Ref "VPC"
      Export:
        Type: String
        Name: !Sub "${AWS::StackName}-VPCId"

    VPCRegion:
      Description: "Region, where VPC was deployed"
      Value: !Sub "${AWS::Region}"
      Export:
        Type: String
        Name: !Sub "${AWS::StackName}-Region"

    PublicSubnet0:
      Description: "SubnetId of public subnet 0"
      Value: !Ref "PublicSubnet0"
      Export:
        Name: !Sub "${AWS::StackName}-PublicSubnet0"

    PublicSubnet1:
      Description: "SubnetId of public subnet 1"
      Value: !Ref "PublicSubnet1"
      Export:
        Name: !Sub "${AWS::StackName}-PublicSubnet1"

    PrivateSubnet0:
      Description: "SubnetId of private subnet 0"
      Value: !Ref "PrivateSubnet0"
      Export:
        Name: !Sub "${AWS::StackName}-PrivateSubnet0"

    PrivateSubnet1:
      Description: "SubnetId of private subnet 1"
      Value: !Ref "PrivateSubnet1"
      Export:
        Name: !Sub "${AWS::StackName}-PrivateSubnet1"

    PrivateSubnet2:
      Description: "SubnetId of private subnet 2"
      Value: !Ref "PrivateSubnet2"
      Export:
        Name: !Sub "${AWS::StackName}-PrivateSubnet2"

    PrivateSubnet3:
      Description: "SubnetId of private subnet 3"
      Value: !Ref "PrivateSubnet3"
      Export:
        Name: !Sub "${AWS::StackName}-PrivateSubnet3"
