# Creates ASG with client web-servers in Private subnets.
#
# Add variables:
# Region="us-east-1"
# VPCName="RunpleVPC"
# Environment="Dev" or "Prod"
# KeyName="main-nvirginia"
# HostedZoneName="miit.pp.ua"
# S3Path="s3://client1-backend-xwiggy"
# Application="xwiggy-0.0.3-SNAPSHOT.jar"
# ClientId="1"
# DbUser="root"
# DbPassword="abcd1234"
#
# To create/update stack use:
# aws cloudformation deploy --stack-name client${ClientId}-asg --template-file ops/cfn/client1.yml --parameter-overrides VPCStackName=${Environment}${VPCName} Environment=${Environment} KeyName=${KeyName} HostedZoneName=${HostedZoneName} ClientId=${ClientId} S3Path=${S3Path} Application=${Application} DbUser=${DbUser} DbPassword=${DbPassword} --capabilities CAPABILITY_NAMED_IAM --region ${Region}
#
# To delete stack use:
# aws cloudformation delete-stack --stack-name client${ClientId}-asg --region ${Region}
---
  AWSTemplateFormatVersion: '2010-09-09'

  Description: 'ASG with client web-servers in Private subnets'

  Parameters:

    VPCStackName:
      Type: String

    Environment:
      Type: String
      Description: Dev or Prod

    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: 'AWS::EC2::KeyPair::KeyName'
      ConstraintDescription: must be the name of an existing EC2 KeyPair.

    InstanceType:
      Type: String
      Description: Type of EC2 instance.
      Default: t2.micro
      AllowedValues: [ t2.micro, t2.small, t2.medium, t3.micro, t3.small, t3.medium ]
      ConstraintDescription: Must be a valid EC2 instance type.

    ASGCapacity:
      Description: The number of ec2 instances will be runned into ASG
      Type: String
      Default: '1'
      ConstraintDescription: Must be positive integer or zero

    HostedZoneName:
      Type: String
      Description: Project hosted zone name.

    ClientId:
      Type: String
      Description: The client Id.

    S3Path:
      Type: String
      Description: The path to S3 client bucket.

    Application:
      Type: String
      Description: The full name of the application archive.

    DbUser:
      Type: String
      Description: The Database username
      NoEcho: true

    DbPassword:
      Type: String
      Description: The Database password
      NoEcho: true


  Mappings:
    RegionMap:
      eu-central-1:
        AMI: ami-0b418580298265d5c # Ubuntu 18.04
      eu-west-1:
        AMI: ami-035966e8adab4aaad # Ubuntu 18.04
      eu-west-2:
        AMI: ami-006a0174c6c25ac06 # Ubuntu 18.04
      eu-west-3:
        AMI: ami-096b8af6e7e8fb927 # Ubuntu 18.04
      eu-north-1:
        AMI: ami-0b7937aeb16a7eb94 # Ubuntu 18.04
      us-east-1:
        AMI: ami-07ebfd5b3428b6f4d # Ubuntu 18.04
      us-east-2:
        AMI: ami-0fc20dd1da406780b # Ubuntu 18.04
      us-west-1:
        AMI: ami-03ba3948f6c37a4b0 # Ubuntu 18.04
      us-west-2:
        AMI: ami-0d1cd67c26f5fca19 # Ubuntu 18.04
      ca-central-1:
        AMI: ami-0d0eaed20348a3389 # Ubuntu 18.04

  Resources:

    clientSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable HTTP, HTTPS, SSH access
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: 'Name'
            Value: !Sub '${AWS::StackName}-SecurityGroup'
          - Key: 'Environment'
            Value: !Ref Environment

    clientAppRoleProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        InstanceProfileName: !Sub '${AWS::StackName}-Profile'
        Path: '/'
        Roles:
          - !Ref clientAppRole

    clientAppRole:
      Type: AWS::IAM::Role
      Properties:
        Path: '/'
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: !Sub '${AWS::StackName}-Policy'
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Resource: '*'
                  Action:
                    - s3:GetObject

    clientTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: '/'
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 2
        Matcher:
          HttpCode: '200-299'
        Name: !Sub '${AWS::StackName}-TG'
        Port: 8080
        Protocol: HTTP
        TargetType: instance
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
        Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-TG'
        - Key: 'Port'
          Value: 8080

    clientListenerRule:
      Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref clientTargetGroup
        Conditions:
          - Field: host-header
            HostHeaderConfig:
              Values:
                - !Sub 'client${ClientId}.${HostedZoneName}'
        ListenerArn: !ImportValue main-alb-HttpsListener-ARN
        Priority: !Ref ClientId

    clientLaunchConfig:
      Type: 'AWS::AutoScaling::LaunchConfiguration'
      Properties:
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -x
              function retryCommand() {
                  local ATTEMPTS="$1"
                  local SLEEP="$2"
                  local FUNCTION="$3"
                  for i in $(seq 1 $ATTEMPTS); do
                      [ $i == 1 ] || sleep $SLEEP
                      eval $FUNCTION && break
                  done
              }
              echo -------------------------START-----------------------------
              hostnamectl set-hostname webserver
              apt update
              retryCommand 5 10 "apt install openjdk-8-jdk awscli mysql-client -y"
              aws s3 cp "${S3Path}/${Application}" .
              cat << EOF > application.yml
                spring:
                  datasource:
                    url: jdbc:mysql://${DbEndpoint}:3306/myusers
                    username: ${DbUser}
                    password: ${DbPassword}
                    driverClassName: com.mysql.cj.jdbc.Driver

                  jpa:
                    hibernate.ddl-auto: none
                    properties:
                      hibernate:
                        dialect: org.hibernate.dialect.MySQL5Dialect
                fileStorage: /assets
              EOF
              java -jar ${Application} --spring.config.location=application.yml
              echo -------------------------FINISH----------------------------
            - DbEndpoint:
                Fn::ImportValue: !Sub 'client${ClientId}-rds-Endpoint'
        AssociatePublicIpAddress: false
        IamInstanceProfile: !Ref clientAppRoleProfile
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroups:
          - !Ref clientSecurityGroup
        AssociatePublicIpAddress: true

    clientAppASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: !Sub '${AWS::StackName}-App'
        MinSize: '1'
        MaxSize: '3'
        DesiredCapacity: !Ref ASGCapacity
        TargetGroupARNs:
          - !Ref clientTargetGroup
        HealthCheckGracePeriod: 300
        LaunchConfigurationName: !Ref clientLaunchConfig
        VPCZoneIdentifier:
          - Fn::ImportValue: !Sub '${VPCStackName}-PrivateSubnet0'
            Fn::ImportValue: !Sub '${VPCStackName}-PrivateSubnet1'
            Fn::ImportValue: !Sub '${VPCStackName}-PrivateSubnet2'
            Fn::ImportValue: !Sub '${VPCStackName}-PrivateSubnet3'
        Tags:
          - Key: 'Name'
            Value: !Sub '${AWS::StackName}-App'
            PropagateAtLaunch: true
          - Key: 'Environment'
            Value: !Ref Environment
            PropagateAtLaunch: true
      # CreationPolicy:
      #   ResourceSignal:
      #     Count: !Ref WebASGCapacity
      #     Timeout: "PT20M"

    clientAutoScalingPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AutoScalingGroupName: !Ref clientAppASG
        PolicyType: TargetTrackingScaling
        TargetTrackingConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ALBRequestCountPerTarget
            ResourceLabel: !Sub
            - ${AlbArn}/${AlbTgArn}
            - AlbArn: !Select [1, !Split [":loadbalancer/",  !ImportValue "main-ALB-ARN"]]
              AlbTgArn: !Select [5, !Split [":", !Ref clientTargetGroup]]
          TargetValue: 100.0

    clientRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Sub '${HostedZoneName}.'
        Name: !Sub 'client${ClientId}.${HostedZoneName}.'
        Type: CNAME
        TTL: '300'
        ResourceRecords:
          - Fn::ImportValue: main-alb-DNSName
