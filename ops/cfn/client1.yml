# Creates ASG with client web-servers in Private subnets.
#
# Add variables:
# Region="us-east-1"
# VPCName="RunpleVPC"
# Environment="Dev" or "Prod"
# KeyName="main-nvirginia"
# HostedZoneName="miit.pp.ua"
#
# To create/update stack use:
# aws cloudformation deploy --stack-name client1 --template-file ops/cfn/client1.yml --parameter-overrides VPCStackName=${Environment}${VPCName} Environment=${Environment} KeyName=${KeyName} HostedZoneName=${HostedZoneName} --capabilities CAPABILITY_NAMED_IAM --region ${Region}
#
# To delete stack use:
# aws cloudformation delete-stack --stack-name client1 --region ${Region}
---
  AWSTemplateFormatVersion: '2010-09-09'

  Description: "ASG with client web-servers in Private subnets"

  Parameters:

    VPCStackName:
      Type: String

    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: 'AWS::EC2::KeyPair::KeyName'
      ConstraintDescription: must be the name of an existing EC2 KeyPair.

    InstanceType:
      Type: String
      Description: Type of EC2 instance.
      Default: t2.micro
      AllowedValues: [ t2.micro, t2.small, t2.medium, t3.micro, t3.small, t3.medium ]
      ConstraintDescription: Must be a valid EC2 instance type.

    client1ASGCapacity:
      Description: The number of ec2 instances will be runned into ASG
      Type: String
      Default: "1"
      ConstraintDescription: Must be positive integer or zero

    HostedZoneName:
      Type: String
      Description: Project hosted zone name.

  Mappings:
    RegionMap:
      us-east-1:
        AMI: ami-07ebfd5b3428b6f4d # Ubuntu 18.04

  Resources:
    client1SecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable HTTP, HTTPS, SSH access
        VpcId:
          Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: "Name"
            Value: !Sub "${AWS::StackName}-SG"

    client1AppRoleProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        InstanceProfileName: !Sub "${AWS::StackName}-Profile"
        Path: "/"
        Roles:
          - !Ref client1AppRole

    client1AppRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: !Sub "${AWS::StackName}-Policy"
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Resource: "*"
                  Action:
                    - s3:GetObject

    client1TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: '/'
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 2
        Matcher:
          HttpCode: '200-299'
        Name: client1-tg
        Port: 8080
        Protocol: HTTP
        TargetType: instance
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
        Tags:
        - Key: 'Name'
          Value: 'client1-tg'
        - Key: 'Port'
          Value: 8080

    client1ListenerRule:
      Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref client1TargetGroup
        Conditions:
          - Field: host-header
            HostHeaderConfig:
              Values:
                - !Sub 'client1.${HostedZoneName}'
        ListenerArn: !ImportValue main-alb-HttpsListener-ARN
        Priority: 2

    LaunchConfig:
      Type: "AWS::AutoScaling::LaunchConfiguration"
      Properties:
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            function retryCommand() {
                local ATTEMPTS="$1"
                local SLEEP="$2"
                local FUNCTION="$3"
                for i in $(seq 1 $ATTEMPTS); do
                    [ $i == 1 ] || sleep $SLEEP
                    eval $FUNCTION && break
                done
            }
            echo -------------------------START-----------------------------
            hostnamectl set-hostname webserver
            apt update
            retryCommand 5 10 "apt install openjdk-8-jdk awscli mysql-server -y"
            aws s3 cp "s3://client1-backend-xwiggy/xwiggy-0.0.2-SNAPSHOT.jar" .
            aws s3 cp "s3://client1-backend-xwiggy/ddl.sql" .
            aws s3 cp "s3://client1-backend-xwiggy/application.properties" .
            mysql -u root -h ${dbEndpoint} -p < ddl.sql
            java -jar xwiggy-0.0.2-SNAPSHOT.jar --spring.config.location=application.propreties
            echo -------------------------FINISH----------------------------
          - dbEndpoint: !ImportValue rds-Endpoint
        AssociatePublicIpAddress: false
        IamInstanceProfile: !Ref client1AppRoleProfile
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroups:
          - !Ref client1SecurityGroup
        AssociatePublicIpAddress: true

    # webAppAutoScalingPolicy:
    #   Type: AWS::AutoScaling::ScalingPolicy
    #   Properties:
    #     AutoScalingGroupName: !Ref webAppASG
    #     PolicyType: TargetTrackingScaling
    #     TargetTrackingConfiguration:
    #       PredefinedMetricSpecification:
    #         PredefinedMetricType: ALBRequestCountPerTarget
    #         ResourceLabel: !Sub
    #         - ${albarn}/${albtgarn}
    #         - albarn: !Select [1, !Split [":loadbalancer/",  !ImportValue "alb-ALB-ARN"]]
    #           albtgarn: !Select [5, !Split [":", !Ref WebTargetGroup]]
    #       TargetValue: 100.0

    client1AppASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: client1AppASG
        MinSize: "1"
        MaxSize: "3"
        DesiredCapacity: !Ref client1ASGCapacity
        TargetGroupARNs:
          - !Ref client1TargetGroup
        HealthCheckGracePeriod: 300
        LaunchConfigurationName: !Ref LaunchConfig
        VPCZoneIdentifier:
          - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet0"
            Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet1"
            Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet2"
            Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet3"
        Tags:
          - Key: "Name"
            Value: !Sub "${AWS::StackName}-ASG"
            PropagateAtLaunch: true
      # CreationPolicy:
      #   ResourceSignal:
      #     Count: !Ref WebASGCapacity
      #     Timeout: "PT20M"


    client1RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Sub '${HostedZoneName}.'
        Name: !Sub 'client1.${HostedZoneName}.'
        Type: CNAME
        TTL: '300'
        ResourceRecords:
          - Fn::ImportValue: main-alb-DNSName
