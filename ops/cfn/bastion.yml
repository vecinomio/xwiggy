# Creates one-to-one ASG with Bastion-host in Public subnets.
#
# Add variables at first:
# Region="us-east-1"
# VPCName="RunpleVPC"
# Environment="Dev" or "Prod"
# HostedZoneName="miit.pp.ua"
#
# To create/update stack use:
# aws cloudformation deploy --stack-name bastion --template-file ops/cfn/bastion.yml --parameter-overrides VPCStackName=${Environment}${VPCName} Environment=${Environment} HostedZoneName=${HostedZoneName} --capabilities CAPABILITY_NAMED_IAM
# To delete stack use:
# aws cloudformation delete-stack --stack-name bastion
---
  AWSTemplateFormatVersion: '2010-09-09'

  Description: 'Creates AutoScalingGroup with only one Bastion-host.
                Attaches EIP and Persistent Storage to it.'

  Parameters:
    VPCStackName:
      Type: String
      AllowedValues: [ DevVPC, ProdVPC ]
    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: 'AWS::EC2::KeyPair::KeyName'
      Default: devopsa3
      ConstraintDescription: must be the name of an existing EC2 KeyPair.
    InstanceType:
      Type: String
      Description: Type of EC2 instance.
      Default: t2.micro
      AllowedValues: [ t2.micro, t2.small, t2.medium ]
      ConstraintDescription: Must be a valid EC2 instance type.
    VolumeSize:
      Type: Number
      Description: Volume-size of persistent EBS for Bastion-host in Gb
      Default: 10
    HostedZoneName:
      Type: String
      Description: Project hosted zone.
    DesiredCapacity:
      Type: Number
      Description: Desired number of instances in ASG.
      Default: 1
    Environment:
      Type: String
      Description: Dev or Prod

  Mappings:
    RegionMap:
      us-east-1:
        AMI: ami-0b69ea66ff7391e80 # Amazon Linux 2
      us-west-1:
        AMI: ami-0245d318c6788de52 # Amazon Linux 2

  Resources:
    BastionSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable SSH access via port 22
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: 'Name'
            Value: 'bastionSG'
          - Key: 'Environment'
            Value: !Ref Environment

    BastionEIP:
      Type: AWS::EC2::EIP

    BastionRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Sub '${HostedZoneName}.'
        Comment: DNS name for Bastion-host
        Name: !Sub 'bastion.${HostedZoneName}.'
        Type: A
        TTL: '60'
        ResourceRecords: [ !Ref BastionEIP ]

    BastionVolume:
      Type: AWS::EC2::Volume
      Properties:
        AvailabilityZone: !Sub "${AWS::Region}a"
        Encrypted: No
        Size: !Ref VolumeSize
        Tags:
          - Key: 'Name'
            Value: 'BastionEBS'
          - Key: 'Environment'
            Value: !Ref Environment
          - Key: 'BackupByLifecycle'
            Value: 'daily'
        VolumeType: gp2

    DLMRole:
      Type: AWS::IAM::Role
      Properties:
        Description: 'Role for Lifecicle. Needs to creating and managing Snapshots
                      of the Bation Persistent Volume.'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'dlm.amazonaws.com'
              Action:
                  - 'sts:AssumeRole'
        Path: '/'
        Policies:
          - PolicyName: 'LifecicleForBastionEbs'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - ec2:CreateSnapshot
                    - ec2:CreateSnapshots
                    - ec2:DeleteSnapshot
                    - ec2:DescribeInstances
                    - ec2:DescribeSnapshots
                    - ec2:DescribeSnapshotAttribute
                    - ec2:DescribeVolumes
                    - ec2:DescribeVolumeAttribute
                    - ec2:DescribeVolumeStatus
                    - ec2:DescribeVolumesModifications
                    - ec2:DescribeTags
                  Resource: '*'
                - Effect: 'Allow'
                  Action:
                    - ec2:CreateTags
                  Resource: 'arn:aws:ec2:*::snapshot/*'

    BastionLifecyclePolicy:
      Type: "AWS::DLM::LifecyclePolicy"
      Properties:
        Description: 'Lifecycle Policy for BastionEBS'
        ExecutionRoleArn: !GetAtt DLMRole.Arn
        State: 'ENABLED'
        PolicyDetails:
          ResourceTypes:
            - 'VOLUME'
          TargetTags:
            - Key: 'BackupByLifecycle'
              Value: 'daily'
          Schedules:
            -
              Name: 'Daily Snapshots'
              TagsToAdd:
                - Key: 'type'
                  Value: 'DailySnapshot'
              CreateRule:
                Interval: 24
                IntervalUnit: 'HOURS'
                Times:
                  - '01:00'
              RetainRule:
                Count: 5
              CopyTags: true

    BastionRole:
      Type: AWS::IAM::Role
      Properties:
        Description: 'Role for Bastion-host. Needs to attaching EBS and
                     associate/disassociate EIP for itself.'
        RoleName: 'BastionRole'
        Path: '/'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: 'AttachingEIPandVolumeToBastion'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Resource: '*'
                  Action:
                    - ec2:AssociateAddress
                    - ec2:DisassociateAddress
                    - ec2:AttachVolume
                    - ec2:DescribeVolumes

    BastionInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: '/'
        Roles:
          - Ref: BastionRole

    LaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -x
              echo -------------------------START-----------------------------
              instanceID=$(curl -s \
              http://169.254.169.254/latest/meta-data/instance-id)
              allocationID=${AllocationId}
              region=${Region}
              volumeID=${VolumeId}
              volumeDevice=/dev/xvdf
              mountDir=/bastionData
              function retryCommand() {
                  local ATTEMPTS="$1"
                  local SLEEP="$2"
                  local FUNCTION="$3"
                  for i in $(seq 1 $ATTEMPTS); do
                      [ $i == 1 ] || sleep $SLEEP
                      eval $FUNCTION && echo $? && break || echo $?
                  done
              }
              echo ---------------------ASSOCIATING EIP-----------------------
              retryCommand 5 10 "aws ec2 associate-address --instance-id \
              $instanceID --allocation-id $allocationID --region $region"
              echo ---------------------ATTACHING VOLUME----------------------
              aws ec2 describe-volumes --region us-east-1
              retryCommand 5 10 "aws ec2 attach-volume --volume-id $volumeID \
              --instance-id $instanceID --device $volumeDevice \
              --region $region"
              echo ---------------------MOUNTING VOLUME-----------------------
              retryCommand 5 10 "yum install -y xfsprogs"
              retryCommand 5 10 "mkfs.xfs $volumeDevice"
              mkdir $mountDir
              mount $volumeDevice $mountDir
              echo "$volumeDevice  $mountDir  xfs  defaults,nofail  0  2" \
              >> /etc/fstab
            - AllocationId: !GetAtt BastionEIP.AllocationId
              VolumeId: !Ref BastionVolume
              Region: !Ref 'AWS::Region'
        AssociatePublicIpAddress: true
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile: !Ref BastionInstanceProfile
        SecurityGroups:
          - !Ref BastionSecurityGroup

    BastionAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
          - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet0"
        LaunchConfigurationName: !Ref LaunchConfig
        MinSize: '1'
        MaxSize: '2'
        DesiredCapacity: !Ref DesiredCapacity
        Tags:
          - Key: 'Name'
            Value: 'bastion-ASG'
            PropagateAtLaunch: true
          - Key: 'Environment'
            Value: !Ref Environment
            PropagateAtLaunch: true
